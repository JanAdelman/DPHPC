-> Consider using openmp or atleast mpi3 remote memory access
-> Performance evaluation 
-> Implement the naive algorithm using parallel merge sort and compare to current implementation
-> Encode nucleotide as 2 bit
-> consider bucket sort
-> Can still use ALltoallv with overlaps, just set right sendcounts
-> use good sorting algorithm instead of reoder to string order
->Alltoallv 
->Does finding with seekg allocate memory? Would it be better to simply divide the file_size over the bit of a char?
-> Found problem: With prefix doubling, we have ignored until now the case where in the end the kmer may be bigger than
the same kmer within the string, but it will be put as smaller because of the large initial shift. How to circumvent? In the first iteration,
we check who is actually bigger. Other option: simply add k-1 termination characters

Compile with optimisation flag: (on Euler) 
mpicxx -O3 -pg  -std=c++11 main_mpi.cpp -o main
bsub -n 32 mpirun  ./main .

-pg flag will create an analysis file of the code call gnom
open this file with:
gprof ./main  gmon.out

Allocate more memory for a node, on euler:
bsub -n 128 -R "rusage[mem=amount_of_mem_you_need (bytes)]" mpirun  ./main
